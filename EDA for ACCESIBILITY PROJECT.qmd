---
title: "Testing-Accesbility_Maps"
author: "ThreeDots"
format: html
editor: visual
---

## Mapping Accessibility Primary Health Facilities

We are trying to map accesibility to PHC in Tanzania and Zambia

## We first needed to check for Data Availability

```{r,setup}
#| echo: false
#| warning: false
#| message: false


```

```{r}

rm(list=ls())

## Packages
library(gdistance)
library(abind)
library(rje)
library(ggplot2)
library(malariaAtlas)
library(sp)
library(exactextractr)
library(dplyr)
library(readxl)
library(sf)

## Plot defaults
theme_set(theme_minimal(base_size=14))


setwd("C:/Users/hmboya/Documents/GitHub/friction-example")

```

Let us load shapefiles first

```{r}
## Output Files
T.filename <- 'transmission.matrix.rds'
T.GC.filename <- 'geocorrected.transition.matrix.rds'
output.raster.filename <- 'travel.times.tif'


```

```{r}

 TZ.shp <- malariaAtlas::getShp(ISO = "TZA", admin_level = "admin2")
 analysis.shp_TZ <- TZ.shp[TZ.shp$name_1 == "Regions"]
 plot(analysis.shp_TZ, main="ADM2 (District) Shapefile for Tanzania")
 

```

```{r}

# 1. Motorized friction surface (2020)
motorized_friction <- getRaster(
  dataset_id = "Explorer__2020_motorized_friction_surface",
  shp = analysis.shp_TZ
)


plot(motorized_friction,main="FRICTION SURFACES 2020 Motorised")


```

```{r}
# 1. Motorized friction surface (2020)
motorized_friction <- getRaster(
  dataset_id = "Explorer__2020_motorized_friction_surface",
  shp = analysis.shp_TZ
)
# Make sure CRS matches
analysis.shp_TZ <- st_transform(analysis.shp_TZ, crs(motorized_friction))
# Crop and mask
friction_crop <- crop(motorized_friction, analysis.shp_TZ)
friction_mask <- mask(friction_crop, analysis.shp_TZ)

#malariaAtlas::autoplot_MAPraster(friction_mask)


analysis.shp_TZ$mean_friction <- exact_extract(motorized_friction, analysis.shp_TZ, 'mean')


# Plot adm3 polygons colored by mean friction
ggplot(analysis.shp_TZ) +
  geom_sf(aes(fill = mean_friction), color = "black", size = 0.2) +
  scale_fill_viridis_c(option = "cividis", na.value = "grey90", name = "Mean Friction") +
  theme_minimal() +
  labs(title = "Motorized Friction Surfaces by ADM2") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank())


```

```{r}

# 2. Walking-only friction surface (2020)
walking_friction <- getRaster(
  dataset_id = "Explorer__2020_walking_only_friction_surface",
  shp = analysis.shp_TZ
)


plot(walking_friction,main="FRICTION SURFACES 2020 Walking")

```

```{r}

# 2. Walking-only friction surface (2020)
walking_friction <- getRaster(
  dataset_id = "Explorer__2020_walking_only_friction_surface",
  shp = analysis.shp_TZ
)
# Make sure CRS matches
analysis.shp_TZ <- st_transform(analysis.shp_TZ, crs(walking_friction))
# Crop and mask
friction_crop <- crop(walking_friction, analysis.shp_TZ)
friction_mask <- mask(friction_crop, analysis.shp_TZ)

#malariaAtlas::autoplot_MAPraster(friction_mask)


analysis.shp_TZ$mean_friction <- exact_extract(walking_friction, analysis.shp_TZ, 'mean')


# Plot adm3 polygons colored by mean friction
ggplot(analysis.shp_TZ) +
  geom_sf(aes(fill = mean_friction), color = "black", size = 0.2) +
  scale_fill_viridis_c(option = "cividis", na.value = "grey90", name = "Mean Friction") +
  theme_minimal() +
  labs(title = "Friction Surface by Walking by Adm2") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank())
```

```{r}

# 3. Travel time to healthcare (motorized, 2020)
motorized_healthcare_access <- getRaster(
  dataset_id = "Explorer__2020_motorized_travel_time_to_healthcare",
  shp = analysis.shp_TZ
)
plot(motorized_healthcare_access, main="Access Friction Surface Motorized")

```

```{r}


# 4. Travel time to healthcare (walking-only, 2020)
walking_healthcare_access <- getRaster(
  dataset_id = "Explorer__2020_walking_only_travel_time_to_healthcare",
  shp = analysis.shp_TZ
)
malariaAtlas::autoplot_MAPraster(walking_healthcare_access)


# 5. Travel time to cities (2015)
city_access <- getRaster(
  dataset_id = "Explorer__2015_accessibility_to_cities_v1.0",
  shp = analysis.shp_TZ
)
malariaAtlas::autoplot_MAPraster(city_access)


friction_2015 <- getRaster(
  dataset_id = "Explorer__2015_friction_surface_v1_Decompressed",
  shp = analysis.shp_TZ
)
malariaAtlas::autoplot_MAPraster(friction_2015)


```

```{r}

# --- Load friction raster (assuming already loaded as SpatRaster) ---
friction_raster <- raster(walking_friction)  # convert terra::SpatRaster to raster::RasterLayer

# --- Build transition matrix and geocorrect ---
T <- gdistance::transition(friction_raster, function(x) 1/mean(x), 8)
T.GC <- gdistance::geoCorrection(T)

```

```{r}
# --- Tanzania (TZ) ---

## Load shapefile for Tanzania and convert to Spatial if needed
analysis.shp_TZ_sp <- as_Spatial(analysis.shp_TZ)  # convert sf to Spatial

# Load
tz_facs_2025 <- read_excel("List of Operating Health Facilities AS OF 2025_Apr_25 (1).xlsx")

# Convert Latitude and Longitude to numeric (coerce invalid entries to NA)
tz_facs_2025 <- tz_facs_2025 %>%
  mutate(
    Latitude = as.numeric(Latitude),
    Longitude = as.numeric(Longitude)
  )

# Filter valid lat/lon (remove NA and impossible values)
tz_facs_2025_clean <- tz_facs_2025 %>%
  filter(!is.na(Latitude), !is.na(Longitude)) %>%
  filter(Latitude >= -90 & Latitude <= 90) %>%
  filter(Longitude >= -180 & Longitude <= 180)

# Convert to sf points
point.locations_tz <- st_as_sf(tz_facs_2025_clean,
                              coords = c("Longitude", "Latitude"),
                              crs = 4326,
                              remove = FALSE)


# Convert to SpatialPointsDataFrame
point.locations_tz_sp <- as(point.locations_tz, "Spatial")


#Make sure projections match
proj4string(point.locations_tz_sp) <- proj4string(analysis.shp_TZ_sp)

overlap_tz <- over(point.locations_tz_sp, analysis.shp_TZ_sp)

# Check columns in overlap_tz
print(names(overlap_tz))

length(overlap_tz$mean_friction)
length(point.locations_tz_sp)


# Use a valid column to filter points inside TZ
point.locations_tz_sp <- point.locations_tz_sp[!is.na(overlap_tz$GID_0), ]



# Convert points to matrix for accessibility function
points_tz <- as.matrix(coordinates(point.locations_tz_sp))


## Calculate accessibility raster
access.raster.tz <- gdistance::accCost(T.GC, points_tz)
access.raster.tz.r <- raster(access.raster.tz)  # convert to RasterLayer


pts_df_tz <- as.data.frame(st_coordinates(point.locations_tz))
names(pts_df_tz) <- c("X_COORD", "Y_COORD")



```

```{r}
plot_accessibility <- function(access_raster, pts_df, shp_sf, title) {
  # Convert RasterLayer to dataframe for ggplot
  raster_df <- as.data.frame(rasterToPoints(access_raster))
  colnames(raster_df) <- c("x", "y")  # Add 'value' column name

  # Convert Spatial* shapefile to sf (if needed)
  if (!inherits(shp_sf, "sf")) {
    shp_sf <- st_as_sf(shp_sf)
  }

  ggplot() +
    geom_raster(data = raster_df, aes(x = x, y = y)) +  # fill mapped
    geom_sf(data = shp_sf, fill = NA, color = "black") +
    geom_point(data = pts_df, aes(x = X_COORD, y = Y_COORD), color = "red", size = 1) +
    scale_fill_gradientn(colors = rev(rje::cubeHelix(
      gamma = 1.0, start = 1.5, r = -1.0, hue = 1.5, n = 16)),
      name = "Minutes \n of Travel") +
    ggtitle(title) +
    theme_minimal() +
    theme(axis.text = element_blank(),
          plot.title = element_text(size = 14, face = "bold"))
}

```

```{r}
plot(access_raster_masked)

plot_tz <- plot_accessibility(access_raster_masked, , "Travel Time to Most Accessible Health Facility - Tanzania")


analysis.shp_TZ$accessibility

summary(analysis.shp_TZ$accessibility)


# Plot adm3 polygons colored by mean friction
ggplot(analysis.shp_TZ) +
  geom_sf(aes(fill = accessibility), color = "black", size = 0.2) +
  scale_fill_viridis_c(option = "cividis", na.value = "grey90", name = "Walking time (minutes)")+ 
  theme_minimal() +
  labs(title = "Mean Speed of walking travel across Pixel by Adm2") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank())

# Display plots
print(plot_tz)


library(terra)
library(sf)

# Convert raster and shapefile to terra objects
access_raster <- rast(access.raster.tz)
shp_vect <- vect(analysis.shp_TZ)

# Make sure CRS match
shp_vect <- project(shp_vect, crs(access_raster))

# Crop and mask
access_raster_crop <- crop(access_raster, ext(shp_vect))
access_raster_masked <- mask(access_raster_crop, shp_vect)

```

```{r}

 ZMB.shp <- malariaAtlas::getShp(ISO = "ZMB", admin_level = "admin1")
 analysis.shp_ZMB <- ZMB.shp[ZMB.shp$name_1 == "Regions"]
 plot(analysis.shp_ZMB, main="Shape for Clipping")
 

```

```{r}

# 1. Motorized friction surface (2020)
motorized_friction <- getRaster(
  dataset_id = "Explorer__2020_motorized_friction_surface",
  shp = analysis.shp_ZMB
)
malariaAtlas::autoplot_MAPraster(motorized_friction)

# 2. Walking-only friction surface (2020)
walking_friction <- getRaster(
  dataset_id = "Explorer__2020_walking_only_friction_surface",
  shp = analysis.shp_ZMB
)
malariaAtlas::autoplot_MAPraster(walking_friction)


# 3. Travel time to healthcare (motorized, 2020)
motorized_healthcare_access <- getRaster(
  dataset_id = "Explorer__2020_motorized_travel_time_to_healthcare",
  shp = analysis.shp_ZMB
)
malariaAtlas::autoplot_MAPraster(motorized_healthcare_access)


# 4. Travel time to healthcare (walking-only, 2020)
walking_healthcare_access <- getRaster(
  dataset_id = "Explorer__2020_walking_only_travel_time_to_healthcare",
  shp = analysis.shp_ZMB
)
malariaAtlas::autoplot_MAPraster(walking_healthcare_access)


# 5. Travel time to cities (2015)
city_access <- getRaster(
  dataset_id = "Explorer__2015_accessibility_to_cities_v1.0",
  shp = analysis.shp_ZMB
)
malariaAtlas::autoplot_MAPraster(city_access)


friction_2015 <- getRaster(
  dataset_id = "Explorer__2015_friction_surface_v1_Decompressed",
  shp = analysis.shp_ZMB
)
malariaAtlas::autoplot_MAPraster(friction_2015)


```

```{r}
# --- Zambia (ZMB) ---


analysis.shp_zmb_sp <- as_Spatial(analysis.shp_ZMB)

## Load point locations for Zambia (assuming already a dataframe)
point.locations_zmb <- mfl_facilities_export20250530083706 %>%
  filter(!is.na(Latitude) & !is.na(Longitude)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE) # adjust accordingly

names(point.locations_zmb) <- c("Longitude", "Latitude", "Name")

# Convert to sf and then SpatialPointsDataFrame
point.locations_zmb_sf <- st_as_sf(point.locations_zmb,
                                   coords = c("Longitude", "Latitude"),
                                   crs = 4326, remove = FALSE)
point.locations_zmb_sp <- as_Spatial(point.locations_zmb_sf)

# Match projections
proj4string(point.locations_zmb_sp) <- proj4string(analysis.shp_zmb_sp)

# Keep only points inside Zambia shapefile
overlap_zmb <- over(point.locations_zmb_sp, analysis.shp_zmb_sp)
point.locations_zmb_sp <- point.locations_zmb_sp[!is.na(overlap_zmb$GID_0), ]

# Convert to matrix for accessibility
points_zmb <- as.matrix(coordinates(point.locations_zmb_sp))


## Calculate accessibility raster
access.raster.zmb <- gdistance::accCost(T.GC, points_zmb)
access.raster.zmb.r <- raster(access.raster.zmb)  # convert to RasterLayer

# Prepare points dataframe for plotting
pts_df_zmb <- data.frame(coordinates(point.locations_zmb_sp))
names(pts_df_zmb) <- c("X_COORD", "Y_COORD")
```

\`\`\`{r}

plot_zmb \<- plot_accessibility(access.raster.zmb.r, pts_df_zmb, analysis.shp_zmb, "Travel Time to Most Accessible Health Facility - Zambia")

print(plot_zmb)
